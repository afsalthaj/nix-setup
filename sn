#!/usr/bin/env bash

RESOLVED_SOURCE=$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")
DIR=$( cd "$( dirname $RESOLVED_SOURCE )" && pwd )

envprefix=SN_OPTION_
snflagprefix=SN_NIX_SHELL_

shortcut() {
  export ${envprefix}"$1"="$2"
}

fetch() {
  echo $(env | grep "${envprefix}$1=" | perl -pe 'chomp')
}

getenvvar() {
  printenv "$1"
}

iterm2_set_user_var () {
  printf "\033]1337;SetUserVar=%s=%s\007" "$1" $(printf "%s" "$2" | base64 | tr -d '\n')
}

invokeshell () {
  prevsnshells="${snshells}"
  export snshells="${thisshell} ${prevsnshells}"
  iterm2_set_user_var badgeText "${snshells}"

  echo "Entering Nix shell for $thisshell"
  if [[ -n $1 ]]; then
    # recurse remaining specified shells
    nix-shell --show-trace $(cut -d "=" -f 2 <<< "$derivationdir") --run "$DIR/sn $1 $2 $3 $4 $5 $6 $7 $8 $9"
  else
    #echo Entering zsh
    nix-shell --show-trace $(cut -d "=" -f 2 <<< "$derivationdir") --run "zsh"
  fi

  echo "Leaving Nix shell for $thisshell"
  iterm2_set_user_var badgeText "${prevsnshells}"
}

handleshells() {
  thisshell="$1"

  # mutation ftw
  shift

  snflag="${snflagprefix}${thisshell}"

  if [[ -n $(getenvvar "${snflag}") ]]; then
    #echo "Already in Nix for ${thisshell}"

    if [[ -n $1 ]]; then
      # ignore this shell and recurse remaining specified shells
      $DIR/sn $1 $2 $3 $4 $5 $6 $7 $8 $9
    else
      echo Entering zsh
      zsh
    fi

  else
    derivationdir=$(fetch "${thisshell}")

    if [[ -z "${derivationdir// }" ]]; then

      echo "Unknown option ${thisshell} â€“ choices are:"
      env | grep ${envprefix} | sort | sed -e 's/'${envprefix}'//' | sed -e 's/=/ => /' | sed -e 's/^/  /'
      echo "Master here: ~/dev/oss/nixpkgs/pkgs/top-level/all-packages.nix"
      exit 1

    else
      export "${snflag}"=indeed
      invokeshell "$@"
    fi

  fi
}

main() {
  shortcut aws          $DIR/aws.nix
  shortcut gcp          $DIR/gcp.nix
  shortcut linkerd      $DIR/linkerd.nix
  shortcut haskell      $DIR/haskell.nix
  shortcut kafka        $DIR/kafka.nix
  shortcut scala        $DIR/scala.nix
  shortcut dotty        $DIR/dotty.nix
  shortcut shellutil    $DIR/shell.nix
  shortcut dataflow     $DIR/dataflow.nix
  shortcut spark        $DIR/spark.nix
  shortcut terraform    $DIR/terraform.nix
  shortcut nodejs       $DIR/nodejs.nix
  shortcut postgres     $DIR/postgres.nix

  # always add shellutil
  shutilflag="${snflagprefix}shellutil"
  if [[ -n $(getenvvar "${shutilflag}") ]]; then
    handleshells "$@"
  else
    handleshells shellutil "$@"
  fi

  while read var; do unset $var; done < <(env | grep ${envprefix} | cut -d "=" -f 1)
}

main "$@"
